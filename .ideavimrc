" !!!!! CTRL+SPACE (2 times) - complete static methods!
" !!!!! CTRL+ALT+SHIFT+INSERT - scratch file to experiments
" !!!!! Ctrl+Shift+F7   - show where exception get caused

set laststatus=2
set hlsearch
set ignorecase
set incsearch
set showcmd
set showmode
set smartcase
" set rnu
set nu
set NERDTree
set ideajoin

let mapleader=","
nnoremap ' `
nnoremap ` '

set ideamarks
" Enable vim-surround
set surround
" Enable vim-commentary
set commentary
" Enable vim-easymotion (AceJump plugin required)
set easymotion
" Enable exchange
set exchange
" Enable smart join
set ideajoin
" Enable highliting yanked text
set highlightedyank

nnoremap <Space> <nop>
nnoremap <leader>ev :e ~/.ideavimrc<CR>
nnoremap <leader>sv :source ~/.ideavimrc<CR>
nmap <leader>ei <Action>(ShowSettings)

map <leader>y "+y
map <leader>Y "+yg_
map <leader>p "*p
map <leader>P a<space><esc>p

" Do not overwrite unnamed register with x and s
nnoremap x "_x
nnoremap s "_s

noremap Y yg_
nnoremap n nzzzv
nnoremap N Nzzzv
" nnoremap gd gdzz
nnoremap vv ggVG
nnoremap gd gdzz

vnoremap < <gv
vnoremap > >gv

noremap [b gt
noremap ]b gT

" unimpaired legacy
nmap ]m <Action>(MethodDown)
nmap [m <Action>(MethodUp)
nmap ]l <Action>(GotoNextError)<Action>(ShowErrorDescription)
nmap [l <Action>(GotoPreviousError)<Action>(ShowErrorDescription)

" camelcase words: ] - forward, [ - backward
noremap [w [b
noremap ]w [w
nmap [c <Action>(VcsShowPrevChangeMarker)<Action>(Vcs.ShowDiffWithLocal)
nmap ]c <Action>(VcsShowNextChangeMarker)<Action>(Vcs.ShowDiffWithLocal)
nnoremap [<Space> O<ESC>j 0 w
nnoremap ]<Space> o<ESC>k 0 w

nnoremap yoh :nohlsearch<CR>
nmap yob <Action>(ToggleLineBreakpoint)
nmap yop <Action>(TogglePresentationMode)
nmap yow <Action>(EditorToggleShowWhitespaces)
nmap yol <Action>(EditorToggleShowLineNumbers)
nmap yoz <Action>(ToggleZenMode)

nmap <C-S-o> <Action>(OverrideMethods)
nmap <C-S-i> <Action>(ImplementMethods)
nmap <C-S-j> <Action>(NextIdentifierReloaded)
nmap <C-S-k> <Action>(PreviousIdentifierReloaded)
nmap <C-S-h> <Action>(MoveElementLeft)
nmap <C-S-l> <Action>(MoveElementRight)

imap <C-k> <C-O><Action>(ParameterInfo) i

" hr = hunk reset
nmap <leader>hr <Action>(Vcs.RollbackChangedLines)

" nvim: Telescope
" noremap <leader>la :action QuickActions<CR>
nmap <leader>la <Action>(Refactorings.QuickListPopupAction)
nmap <leader>lb <Action>(RecentFiles)
nmap <leader>lf <Action>(GotoFile)
nmap <leader>lc <Action>(GotoClass)
nmap <leader>ll <Action>(RecentLocations)
nmap <leader>lm <Action>(ShowBookmarks)
nmap <leader>lp <Action>(ManageRecentProjects)
nmap <leader>lr <Action>(RecentChangedFiles)
nmap <leader>ls <Action>(FileStructurePopup)

"""""""""" Refactor.
" refactor: menu
noremap <leader>rm :action RefactoringMenu<CR>
" refactor: format
noremap <leader>rf :action ReformatCode<CR><Bar>:action AutoIndentLines<Bar>:action OptimizeImports<CR>
vnoremap <leader>rf :action ReformatCode<Bar>:action AutoIndentLines<Bar><CR>
" refactor: inline
noremap <leader>ri :action Inline<CR>
" refactor: rename
noremap <leader>rr :action RenameElement<CR>
"""""""""" Refactor. End.

"""""""""" Find.
" fp = find project
nmap <leader>fp <Action>(FindInPath)
" fw = find word
nmap <leader>fw viw<Action>(FindInPath)
"""""""""" Find. End.

noremap <leader><leader>l :action AceLineIndentsAction<CR>
noremap <leader><leader>w :action AceWordStartAction<CR>
noremap <leader><leader>c :action AceTargetAction<CR>

nmap gm :action ToggleBookmark<CR>
nmap gM :action ToggleBookmarkWithMnemonic<CR>
nmap gn :action GotoNextBookmark<CR>
nmap gp :action GotoPreviousBookmark<CR>

" maximize working area
noremap <C--> :action HideAllWindows<CR>

" Mnemonic: 'to'
nnoremap <leader>tt :action GotoTypeDeclaration<CR>
nnoremap <leader>ti :action GotoImplementation<CR>
nnoremap <leader>tu :action ShowUsages<CR>
nnoremap <leader>tU :action FindUsages<CR>
nnoremap <leader>ts :action GotoSuperMethod<CR>

nnoremap tt :action GotoTest<CR>

" to 'class'
nnoremap [[ gg<BAR>:action MethodDown<CR><BAR>zt

" native back/forward is more predictable
map <C-o> <Action>(Back)
map <C-i> <Action>(Forward)

noremap <leader>N :action NewElement<CR>

" Mnemonic 'extract'
nnoremap <leader>em :action ExtractMethod<CR>
vnoremap <leader>em :action ExtractMethod<CR>
noremap <leader>ec :action ExtractClass<CR>

" Mnemonic 'introduce'
noremap <leader>ic :action IntroduceConstant<CR>
noremap <leader>if :action IntroduceField<CR>
noremap <leader>ip :action IntroduceParameter<CR>
noremap <leader>iv :action IntroduceVariable<CR>

map <leader>x <Action>(EvaluateExpression)

" Git
"noremap <leader>gg: action Git.FileActions<CR>
noremap <leader>ga :action Annotate<CR>
noremap <leader>gb :action Git.Branches<CR>
noremap <leader>gg :action Git.Menu<CR>
noremap <leader>gh :action Vcs.ShowTabbedFileHistory<CR>
noremap <leader>gl :action Vcs.Show.Log<CR>
noremap <leader>gu :action Vcs.UpdateProject<CR>

" Common
noremap <leader>c :action CheckinProject<CR>
" overridden by <leader>hr
noremap <leader>H :action TypeHierarchy<CR>
" noremap <leader>h :action HighlightUsagesInFile<CR>
noremap <leader>u :action ShowUmlDiagramPopup<CR>
noremap <leader>k :q<CR>
noremap <leader>m :action Move<CR>
noremap <leader>G :action Generate<CR>
vnoremap <leader>s :action SurroundWithLiveTemplate<CR>

noremap \t :action ChooseDebugConfiguration<CR>
noremap \d :action ChooseDebugConfiguration<CR>
noremap \r :action ChooseRunConfiguration<CR>
noremap \s :action Stop<CR>
